from typing import Any, Set, List, Tuple, Sequence

import drawsvg  # type:ignore

class Circle:
    __match_args__: Any
    cx: int
    cy: int
    r: int
    fill: str
    def __init__(self, cx: int, cy: int, r: int, fill: str) -> None: ...

class CircleMove:
    __match_args__: Any
    moves: Sequence[Tuple[int, Circle]]
    def __init__(self, moves) -> None: ...
    @property
    def duration(self) -> int: ...

class Rectangle:
    __match_args__: Any
    t: drawsvg.Rectangle
    def __init__(self, t) -> None: ...
    def __post_init__(self) -> None: ...

class Group:
    __match_args__: Any
    t: drawsvg.Group
    def __init__(self, t) -> None: ...
    def __post_init__(self) -> None: ...

class Scene:
    __match_args__: Any
    moves: Set[CircleMove]
    def __init__(self, moves: Set[CircleMove]) -> None: ...
    @property
    def duration(self) -> int: ...

class Story:
    __match_args__: Any
    scenes: List[Scene]
    t: drawsvg.Drawing
    def __init__(self, scenes: List[Scene], t: drawsvg.Drawing) -> None: ...
    @property
    def duration(self) -> int: ...

def make_rectangle(x: int, y: int, width: int, height: int) -> Rectangle: ...
def make_circle(cx: int, cy: int, r: int) -> Circle: ...

# def make_movement(move: CircleMove) -> CircleMove: ...
def make_move_circle(moves: List[Tuple[int, Circle]]) -> CircleMove: ...
def make_scene(moves: List[CircleMove]) -> Scene: ...
def make_story(width: int, height: int, scenes: List[Scene]) -> Story: ...
